[{"title":"export export default exports module.exports区别与联系","date":"2017-09-28T09:05:00.000Z","path":"2017/09/28/export-export-default-exports-module-exports区别与联系/","text":"","tags":[]},{"title":"JS数据类型","date":"2017-09-21T16:32:18.000Z","path":"2017/09/22/JS数据类型/","text":"理解Javascript中的基本数据类型与引用类型 理解基本类型与引用类型 ECMAScript中有两种数据类型的值，一种是基本类型，另一种是引用类型。基本类型指的是简单的数据段，引用类型指的是可能由多个值构成的对象。 基本类型 基本类型有5种，即 String Number Boolean Null Underfined。基本类型的值只能是单独的数据段，不能在其上添加属性值。与引用类型作对比，引用类型是可以在其上添加属性值的。 基本数据类型是按值访问的，所以存放在基本数据类型的变量中的事具体的值，我们可以直 接操作变量中的值。 var num1=5; var num2=num1; 如上代码中创建了一个num1变量并赋值5，然后将其复制到新创建的num2中,这时候的两个变量是完全两个独立的值，一个的值改变并不会影响另一个，在复制时只是将其中的值传给了另一个变量。 引用类型引用类型的值通俗点来说可以是由多个基本类型的值（也可以是对象）组成的对象。与基本类型的变量不同的是，引用类型的变量中保存的并不是对象的值。而是指向内存中对象值的引用。 var obj1=new object(); var obj2=obj1; obj1.name=&quot;zhangchong&quot;; alert(obj2.name);//zhangchong 由此复制操作可看出，在引用类型变量中存储的是指向实际存储位置的引用，复制只是将存在其中的引用赋值给了obj2。 javascript中的按值传递 先来看几个例子： 1.function addOne(num){ num++; } var num1=1; var result=addOne(num1); alert(num1);//1 alert(result);//2 2.function setAge(obj,num){ obj.age=num; } var zhangsan=new object(); setAge(zhangsan,10); alert(zhangsan.age);//10 3.function setAge(obj,num){ obj.age=num; obj=new object(); obj.age=20; } var wangwu=new object(); setAge(wangwu,8); alert(wangwu.age);//8 上面的三段代码将javascript中传递参数时的按值传递体现的淋漓尽致。 1.首先第一段中，可以看出基本类型值在传递的时候只是将自己的值传入函数中，在函数中任何的操作都不会影响到外边原本的变量。 2.第二段代码中，将引用类型的变量传入函数中，此处可能就会引起人们的不理解，js中不是按值传递，为什么在函数中做的修改会反映到外界原本的对象身上。其实此处仍然是按值传递，因为你继续看第三段代码，wangwu是按引用传递的话，那么最后alert的值应该是20。 3.所以此处到底应该怎么理解呢，首先你要先明白上边所叙述的引用类型的变量当中究竟存储的是什么。是引用！是指向内存中引用类型对象的引用。在向函数的形参传递时，只是将自身变量中保存的引用值复制了一份，给了形参。所以在第二段代码中，obj的值是指向内存中zhangsan的引用，故函数中的修改可以影响到外边的引用类型zhangsan。而第三段代码中obj.age=num，此时obj中保存的时wangwu的引用，但obj=new object已将obj中保存的引用值更新为新生成对象值的引用。所以obj.age=20修改的是新生成对象的age。而函数外的wangwu中保存的仍是原本对象的引用，故wangwu.age仍是18。","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"原生js实现选项卡","date":"2017-09-13T15:12:20.000Z","path":"2017/09/13/原生js实现选项卡/","text":"选项卡是我们在平常浏览网页时经常见到的也是自己开发时经常使用的显示格式，能够起到节省空间，与用户交互更流畅的效果。下面是我用原生的javascript写的选项卡。共有点击切换、滑动切换、滑动延时切换、自动切换四种类型。以下是具体代码（所有html css 代码共用）： 点击切换123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;点击切换选项卡&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123; padding: 0; margin: 0; list-style:none; &#125; .card&#123; width: 298px; height: 98px; margin: 10px; border: 1px solid #eee; overflow: hidden; &#125; .nav&#123; height: 27px; /*width: 301px;*/ position: relative; background-color: #f7f7f7; overflow: hidden; &#125; .nav ul&#123; width: 301px; position: absolute; left: -1px; &#125; .nav ul li&#123; width: 58px; padding: 0 1px;/*因为点击li之后会给其增加border为了保证不变化，此处先加上padding，点击之后再取消*/ float: left; text-align: center; height: 26px; line-height: 26px; background-color: #f7f7f7; border-bottom: 1px solid #f7f7f7; cursor: pointer; &#125; .nav .select&#123;/*选中li之后的样式*/ background-color: #fff; padding: 0; border-left:1px solid #f7f7f7; border-right:1px solid #f7f7f7; border-bottom-color:#fff; &#125; .content .div&#123; margin: 10px 10px 10px 19px; &#125; .content .div ul li&#123; height: 25px; width: 134px; float: left; overflow: hidden; &#125; .div&#123; display: none; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"card\" id=\"card\"&gt; &lt;div class=\"nav\" id=\"nav\"&gt; &lt;ul&gt; &lt;li class=\"select\"&gt;张宠&lt;/li&gt; &lt;li&gt;苗悦&lt;/li&gt; &lt;li&gt;学习&lt;/li&gt; &lt;li&gt;计网&lt;/li&gt; &lt;li&gt;系统&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=\"content\" id=\"content\"&gt; &lt;div class=\"div\" style=\"display: block;\"&gt; &lt;ul&gt; &lt;li&gt;张宠好好学习&lt;/li&gt; &lt;li&gt;张宠好好学习&lt;/li&gt; &lt;li&gt;张宠好好学习&lt;/li&gt; &lt;li&gt;张宠好好学习&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=\"div\"&gt; &lt;ul&gt; &lt;li&gt;苗悦好好学习&lt;/li&gt; &lt;li&gt;苗悦好好学习&lt;/li&gt; &lt;li&gt;苗悦好好学习&lt;/li&gt; &lt;li&gt;苗悦好好学习&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=\"div\"&gt; &lt;ul&gt; &lt;li&gt;张宠好好加油&lt;/li&gt; &lt;li&gt;张宠好好加油&lt;/li&gt; &lt;li&gt;张宠好好加油&lt;/li&gt; &lt;li&gt;张宠好好加油&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=\"div\"&gt; &lt;ul&gt; &lt;li&gt;苗悦好好加油&lt;/li&gt; &lt;li&gt;苗悦好好加油&lt;/li&gt; &lt;li&gt;苗悦好好加油&lt;/li&gt; &lt;li&gt;苗悦好好加油&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=\"div\"&gt; &lt;ul&gt; &lt;li&gt;张爸爸好好学习&lt;/li&gt; &lt;li&gt;张爸爸好好学习&lt;/li&gt; &lt;li&gt;张爸爸好好学习&lt;/li&gt; &lt;li&gt;张爸爸好好学习&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;script type=\"text/javascript\"&gt;//单独定义$用id来获取元素function $(id)&#123; return typeof id===\"string\"?document.getElementById(id):id;&#125;window.onload=function () &#123; //首先将所有的li和div获得并存在数组中，因为点击效果正是点在个li上，来切换div var lis=$(\"nav\").getElementsByTagName(\"li\"); var divs=$(\"content\").getElementsByTagName(\"div\"); for(var i=0;i&lt;lis.length;i++)&#123;//用循环的方式给每个li定义点击事件 lis[i].id=i;//自定义属性，给每个li定义id属性，以给后来显示哪个div做准备 lis[i].onclick=function()&#123; //再给li赋予新类名之前先把各个li的类名清空，使其恢复样式恢复原始状态，当点击哪个时再给该li赋予新类名 for(var j=0;j&lt;lis.length;j++)&#123; lis[j].className=\"\"; &#125; //this表示当前li this.className=\"select\"; //与上相同先把各个div的display值赋为none，然后再把当前点击li对应的div的display赋值为block for(var j=0;j&lt;divs.length;j++)&#123; divs[j].style.display=\"none\"; &#125; divs[this.id].style.display=\"block\";//this.id为当前被点击的li对应的id属性 &#125; &#125;&#125;&lt;/script&gt;&lt;/html&gt; 2.滑动切换1234567891011121314151617181920212223&lt;script type=\"text/javascript\"&gt; function $(id)&#123; return typeof id===\"string\"?document.getElementById(id):id; &#125; var lis=$(\"nav\").getElementsByTagName(\"li\"); var divs=$(\"content\").getElementsByTagName(\"div\"); window.onload=function()&#123; for(var i=0;i&lt;lis.length;i++)&#123; lis[i].id=i; lis[i].onmouseover=function()&#123; for(var j=0;j&lt;lis.length;j++)&#123; lis[j].className=\"\"; &#125; this.className=\"select\"; for(var i=0;i&lt;divs.length;i++)&#123; divs[i].style.display=\"none\"; &#125; divs[this.id].style.display=\"block\"; &#125; &#125; &#125;&lt;/script&gt;&lt;/html&gt; 滑动切换与刚才点击切换代码基本一致只是将onclick事件更换为onmouseover3.延时滑动切换 延时滑动切换与滑动切换的区别是，只有当用户鼠标滑到当前选项下并停留稍许时间才会切换内容，以免用户误滑或快速经过也切换内容，提高用户体验. 12345678910111213141516171819202122232425262728293031323334&lt;script type=\"text/javascript\"&gt; function $(id)&#123; return typeof id===\"string\"?document.getElementById(id):id; &#125; //延时切换主要是加定时器来实现的 window.onload=function()&#123; var timer=null;//用来存储定时器 var lis=$(\"nav\").getElementsByTagName(\"li\"); var divs=$(\"content\").getElementsByTagName(\"div\"); if (lis.length!=divs.length) return;//如果选项卡的选项数目与内容数目不对应，就return for(var i=0;i&lt;lis.length;i++)&#123; lis[i].id=i; lis[i].onmouseover=function()&#123; var that=this;//解决后面调用window对象而不能再直接用this的问题 //如果有待执行的定时器先清除，通过此办法可以防止鼠标用户快速经过的问题 if (timer) &#123; clearTimeout(timer); timer=null; &#125; //设置定时器，切换li的类名和更换div的display值将在550ms后执行 timer=setTimeout(function()&#123; for(var j=0;j&lt;lis.length;j++)&#123; lis[j].className=\"\"; divs[j].style.display=\"none\"; &#125; that.className=\"select\"; divs[that.id].style.display=\"block\"; &#125;,550); &#125; &#125; &#125;&lt;/script&gt;&lt;/html&gt; 4.自动切换 自动切换类似于轮播图，是其可以自动切换选项卡内的不同内容，同时当用户鼠标停留其上又可以显示当前选项的内容，而当鼠标离开后又可以自动轮播。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;script type=\"text/javascript\"&gt; function $(id)&#123; return typeof id===\"string\"?document.getElementById(id):id; &#125; window.onload=function()&#123; var index=0;//设置变量用来为轮播当下表索引 var timer=null;//存储定时器 var lis=$(\"nav\").getElementsByTagName(\"li\"); var divs=$(\"content\").getElementsByTagName(\"div\"); if (lis.length!=divs.length) return; for(var i=0;i&lt;lis.length;i++)&#123; lis[i].id=i;//与前面功能相同此处用来启用用户鼠标滑动事件 lis[i].onmouseover=function()&#123; clearInterval(timer); for(var j=0;j&lt;lis.length;j++)&#123; lis[j].className=\"\"; divs[j].style.display=\"none\"; &#125; console.log(this); this.className=\"select\"; divs[this.id].style.display=\"block\"; index=this.id;//此处的目的是为了使用户鼠标离开后能从当前鼠标停留处继续向后轮播 &#125; lis[i].onmouseout=function()&#123;//鼠标离开后重新开始轮播 timer=setInterval(function()&#123;//设置定时器，此处注意setTimeout与setInterval的区别 index++; if(index&gt;=lis.length)&#123;index=0;&#125;; for(var j=0;j&lt;lis.length;j++)&#123; lis[j].className=\"\"; divs[j].style.display=\"none\"; &#125; lis[index].className=\"select\"; divs[index].style.display=\"block\"; &#125;,2000); &#125; &#125; if (timer) &#123;//清除先前的定时器 clearInterval(timer); timer=null; &#125; timer=setInterval(function()&#123;//每2000ms执行一次 index++; if(index&gt;=lis.length)&#123;index=0;&#125;; for(var j=0;j&lt;lis.length;j++)&#123; lis[j].className=\"\"; divs[j].style.display=\"none\"; &#125; lis[index].className=\"select\"; divs[index].style.display=\"block\"; &#125;,2000); &#125;&lt;/script&gt;&lt;/html&gt;","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"css、js实现下拉菜单","date":"2017-09-13T08:43:32.000Z","path":"2017/09/13/css、js实现下拉菜单/","text":"css和js实现下拉菜单 下拉菜单是我们经常使用的一种小实例，这里自己用css和介绍分别实现。 css实现 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;html实现菜单&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123; margin: 0; padding: 0; list-style: none; text-align: center; font-size: 14px; text-decoration: none; &#125; .nav&#123; height: 40px; width: 550px; background-color: #4D4D4B; padding:0 20px; &#125; .nav-1&gt;li&#123; float: left; width: 20%; line-height: 40px; &#125; a&#123; color: #fff; cursor: pointer; display: block; &#125; a:hover&#123; background-color:blue; &#125; .nav-1&gt;li ul&#123; display: none; &#125; .nav-1&gt;li ul li&#123; background-color: #4D4D4B; margin: 2px; &#125; .nav-1&gt;li:hover ul&#123; display: block; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"nav\"&gt; &lt;ul class=\"nav-1\"&gt; &lt;li&gt; &lt;a href=\"#\"&gt;张宠&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"\"&gt;苗悦&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"\"&gt;张宠&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"\"&gt;苗悦&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"\"&gt;张宠&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 当鼠标不经过时display属性设为none，鼠标离开时display属性设为block.注意下hover的放置的位置即可。 js实现 123456789101112131415161718192021222324252627 function showMenu(item)&#123; item.style.display=\"block\";&#125;function hideMenu(item)&#123; item.style.display=\"none\"&#125;var x=document.getElementsByClassName(\"nav-1\")[0];var mouse=x.getElementsByClassName(\"mouse\");var data=x.getElementsByTagName(\"ul\");window.onload=function()&#123; for (var i = 0; i &lt; data.length; i++) &#123; console.log(data[i]); console.log(mouse[i]); mouse[i].onmouseover=function(num)&#123; return function() &#123; showMenu(data[num]); &#125; &#125;(i) mouse[i].onmouseout=function(num)&#123; return function() &#123; hideMenu(data[num]); &#125; &#125;(i) &#125; &#125; 首先获取到要经过的元素和要隐藏的元素。然后循环设置鼠标进过和离开事件。这个地方有个关键之处，即在设置mouse[i]的mouseover mouseout事件时的下标索引时要注意。如果直接： 12345678for (var i = 0; i &lt; data.length; i++) &#123; mouse[i].onmouseover=function()&#123; showMenu(data[i]); &#125; mouse[i].onmouseout=function()&#123; hideMenu(data[i]); &#125; &#125; 此时`showMenu[i]`中所有的i值都为最后的`data.length`，因为当for循环结束后，此时`showMenu[i]`的i会沿着作用域链向上查找，for循环中的i在循环结束后依然存在，所以此时沿着作用域链查找到i，此时的i为`data.length`。 所以用了闭包来解决此问题，即上面的正确代码。此时将闭包包含在一个匿名函数中，并且此匿名函数包含一个参数num，并按值传入i，此时在沿着作用域链往上寻找时，便找到了num。 此外，函数绑定事件时，此种用“=”绑定，只能是匿名函数。 js3种事件绑定方式： 1. 1&lt;input onclick=\"alert('谢谢支持')\" type=\"button\" value=\"点击我，弹出警告框\" /&gt; 123456&lt;input onclick=\"myAlert()\" type=\"button\" value=\"点击我，弹出警告框\" /&gt; &lt;script type=\"text/javascript\"&gt; function myAlert()&#123; alert(\"谢谢支持\"); &#125; &lt;/script&gt; 2. 123456&lt;input id=\"demo\" type=\"button\" value=\"点击我，显示 type 属性\" /&gt; &lt;script type=\"text/javascript\"&gt; document.getElementById(\"demo\").onclick=function()&#123; alert(this.getAttribute(\"type\")); // this 指当前发生事件的HTML元素，这里是&lt;div&gt;标签 &#125; &lt;/script&gt; 3. 1elementObject.addEventListener(eventName,handle,useCapture);","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"},{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]}]